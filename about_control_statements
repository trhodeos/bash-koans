#!/usr/bin/env bash

echo "you've seen alot of 'test' already"
test 1 == 2
echo '[]s are shorthand for "test"'
[ 1 == 2 ]

echo 'weve only seen "==" so far'
echo 'but there are many other parameters to test'
test 1 == 2
test 1 -eq 2
test 1 > 2
test 1 -gt 2
test 2 < 1
test 2 -lt 2
test -z "not-empty"
test ! -z ""
test -f "not-a-file"
test ! -f "about_control_statements"
test -d "not-a-directory"
test ! -d "."
echo 'see "http://tldp.org/LDP/abs/html/testconstructs.html" for more'

echo "now lets use it to change program flow"
if [ 1 == 2 ]; then
    executed="true"
fi
test $executed == "true"
executed=
echo 'else blocks are straightforward as well'

if [ 1 == 2 ]; then
    executed="true"
else
    echo 'abc'
    hopefully not executed
fi
test $executed == "true"

echo 'same with else-if blocks'
executed=
if [ 1 == 1 ]; then
    echo 'abc'
    dont execute me plz
elif [ 1 == 2 ]; then
    $executed="true"
else
    dont execute me either
fi

test $executed == "true"

executed=
echo '"truthy" values may be different than what youd think'
echo 'mainly because "error" exit codes in bash are non-zero'
if 1; then
    $executed="true"
fi
test $executed == "true"

echo 'case statements allow you to specify if/elseif blocks clearly'
transform() {
    case $1 in
        1)
            echo "one"
            ;;
        2)
            echo "two"
            ;;
        *)
            echo "default"
            ;;
    esac
}
test $(transform 1) == "two"
test $(transform 3) == "one"

